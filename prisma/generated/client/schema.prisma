generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "metrics"]
  output          = "./generated/client"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DATABASE_URL_DIRECT")
  relationMode = "foreignKeys"
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  is_default  Boolean   @default(false)
  is_active   Boolean   @default(true)
  description String?
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  products    Product[]

  @@index([name])
  @@index([is_active])
  @@index([is_default])
  @@map("categories")
}

model Product {
  id           Int              @id @default(autoincrement())
  name         String
  price        Decimal          @db.Decimal(10, 2)
  category_id  Int
  quantity     Decimal          @db.Decimal(10, 2)
  unit         String?
  origin       String?
  description  String?
  image        String?
  is_composite Boolean          @default(false)
  is_active    Boolean          @default(true)
  created_at   DateTime         @default(now()) @db.Timestamptz(6)
  category     Category         @relation(fields: [category_id], references: [id])
  contents     ProductContent[]
  order_items  OrderItem[]

  @@index([category_id])
  @@index([is_active])
  @@index([name])
  @@index([is_composite])
  @@index([created_at])
  @@map("products")
}

model ProductContent {
  id         Int     @id @default(autoincrement())
  product_id Int
  name       String
  quantity   String
  origin     String?
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
  @@map("product_contents")
}

model Customer {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String
  phone       String
  countryCode String   @default("+33")
  country     String?
  city        String?
  postalCode  String?
  address     String?
  message     String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  orders      Order[]

  @@index([email])
  @@index([phone])
  @@index([created_at])
  @@map("customers")
}

model Order {
  id          Int         @id @default(autoincrement())
  customer_id Int
  status      String      @default("pending")
  total       Decimal     @db.Decimal(10, 2)
  pickup_date DateTime?   @db.Date
  pickup_time String
  created_at  DateTime    @default(now()) @db.Timestamptz(6)
  customer    Customer    @relation(fields: [customer_id], references: [id])
  items       OrderItem[]

  @@index([customer_id])
  @@index([status])
  @@index([created_at])
  @@index([pickup_date])
  @@map("orders")
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Decimal @db.Decimal(10, 2)
  price      Decimal @db.Decimal(10, 2)
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id])

  @@index([order_id])
  @@index([product_id])
  @@map("order_items")
}

model DeliveryHour {
  id                Int     @id @default(autoincrement())
  day               String
  day_of_week       Int     @unique
  is_open           Boolean @default(true)
  morning_enabled   Boolean @default(true)
  afternoon_enabled Boolean @default(true)
  morning_start     String? @default("09:00")
  morning_end       String? @default("12:00")
  afternoon_start   String? @default("14:00")
  afternoon_end     String? @default("18:00")

  @@index([day_of_week])
  @@map("delivery_hours")
}
